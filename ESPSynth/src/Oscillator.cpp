/*
 * Oscillator.cpp
 *
 *  Created on: 09.02.2018
 *      Author: Jakob
 */

#include "Oscillator.h"

//const static uint32_t freqIncTab[] = {796254, 843601, 893765, 946911, 1003217, 1062871, 1126073, 1193033, 1263974, 1339134, 1418763, 1503127, 1592507, 1687203, 1787529, 1893821, 2006434, 2125742, 2252146, 2386065, 2527948, 2678268, 2837526, 3006254, 3185015, 3374406, 3575058, 3787642, 4012867, 4251485, 4504291, 4772130, 5055896, 5356535, 5675051, 6012507, 6370030, 6748811, 7150117, 7575285, 8025735, 8502970, 9008582, 9544261, 10111792, 10713070, 11350103, 12025015, 12740059, 13497623, 14300233, 15150569, 16051469, 17005939, 18017165, 19088521, 20223584, 21426141, 22700205, 24050030, 25480119, 26995246, 28600467, 30301139, 32102938, 34011878, 36034330, 38177043, 40447168, 42852281, 45400411, 48100060, 50960238, 53990491, 57200933, 60602278, 64205876, 68023757, 72068660, 76354085, 80894335, 85704563, 90800821, 96200119, 101920476, 107980983, 114401866, 121204555, 128411753, 136047513, 144137319, 152708170, 161788671, 171409126, 181601643, 192400238, 203840952, 215961966, 228803732, 242409110, 256823506, 272095026, 288274639, 305416341, 323577341, 342818251, 363203285, 384800477, 407681904, 431923931, 457607465, 484818220, 513647012, 544190053, 576549277, 610832681, 647154683, 685636503, 726406571, 769600953, 815363807, 863847862, 915214929, 969636441, 1027294024, 1088380105, 1153098554, 1221665363};
const static int16_t sineTable[256] = { 0x200,0x20c,0x219,0x225,0x232,0x23e,0x24b,0x257,
		0x263,0x270,0x27c,0x288,0x294,0x2a0,0x2ac,0x2b8,
		0x2c3,0x2cf,0x2da,0x2e5,0x2f1,0x2fc,0x306,0x311,
		0x31c,0x326,0x330,0x33a,0x344,0x34e,0x357,0x360,
		0x369,0x372,0x37a,0x383,0x38b,0x393,0x39a,0x3a2,
		0x3a9,0x3b0,0x3b6,0x3bd,0x3c3,0x3c8,0x3ce,0x3d3,
		0x3d8,0x3dd,0x3e1,0x3e5,0x3e9,0x3ec,0x3f0,0x3f3,
		0x3f5,0x3f7,0x3f9,0x3fb,0x3fd,0x3fe,0x3fe,0x3ff,
		0x3ff,0x3ff,0x3fe,0x3fe,0x3fd,0x3fb,0x3f9,0x3f7,
		0x3f5,0x3f3,0x3f0,0x3ec,0x3e9,0x3e5,0x3e1,0x3dd,
		0x3d8,0x3d3,0x3ce,0x3c8,0x3c3,0x3bd,0x3b6,0x3b0,
		0x3a9,0x3a2,0x39a,0x393,0x38b,0x383,0x37a,0x372,
		0x369,0x360,0x357,0x34e,0x344,0x33a,0x330,0x326,
		0x31c,0x311,0x306,0x2fc,0x2f1,0x2e5,0x2da,0x2cf,
		0x2c3,0x2b8,0x2ac,0x2a0,0x294,0x288,0x27c,0x270,
		0x263,0x257,0x24b,0x23e,0x232,0x225,0x219,0x20c,
		0x200,0x1f3,0x1e6,0x1da,0x1cd,0x1c1,0x1b4,0x1a8,
		0x19c,0x18f,0x183,0x177,0x16b,0x15f,0x153,0x147,
		0x13c,0x130,0x125,0x11a,0x10e,0x103,0xf9,0xee,
		0xe3,0xd9,0xcf,0xc5,0xbb,0xb1,0xa8,0x9f,
		0x96,0x8d,0x85,0x7c,0x74,0x6c,0x65,0x5d,
		0x56,0x4f,0x49,0x42,0x3c,0x37,0x31,0x2c,
		0x27,0x22,0x1e,0x1a,0x16,0x13,0xf,0xc,
		0xa,0x8,0x6,0x4,0x2,0x1,0x1,0x0,
		0x0,0x0,0x1,0x1,0x2,0x4,0x6,0x8,
		0xa,0xc,0xf,0x13,0x16,0x1a,0x1e,0x22,
		0x27,0x2c,0x31,0x37,0x3c,0x42,0x49,0x4f,
		0x56,0x5d,0x65,0x6c,0x74,0x7c,0x85,0x8d,
		0x96,0x9f,0xa8,0xb1,0xbb,0xc5,0xcf,0xd9,
		0xe3,0xee,0xf9,0x103,0x10e,0x11a,0x125,0x130,
		0x13c,0x147,0x153,0x15f,0x16b,0x177,0x183,0x18f,
		0x19c,0x1a8,0x1b4,0x1c1,0x1cd,0x1da,0x1e6,0x1f3,

};
const static int16_t traingleTable[256]{
	0x8,0x10,0x18,0x20,0x28,0x30,0x38,0x40,
	0x48,0x50,0x58,0x60,0x68,0x70,0x78,0x80,
	0x88,0x90,0x98,0xa0,0xa8,0xb0,0xb8,0xc0,
	0xc8,0xd0,0xd8,0xe0,0xe8,0xf0,0xf8,0x100,
	0x108,0x110,0x118,0x120,0x128,0x130,0x138,0x140,
	0x148,0x150,0x158,0x160,0x168,0x170,0x178,0x180,
	0x188,0x190,0x198,0x1a0,0x1a8,0x1b0,0x1b8,0x1c0,
	0x1c8,0x1d0,0x1d8,0x1e0,0x1e8,0x1f0,0x1f8,0x200,
	0x207,0x20f,0x217,0x21f,0x227,0x22f,0x237,0x23f,
	0x247,0x24f,0x257,0x25f,0x267,0x26f,0x277,0x27f,
	0x287,0x28f,0x297,0x29f,0x2a7,0x2af,0x2b7,0x2bf,
	0x2c7,0x2cf,0x2d7,0x2df,0x2e7,0x2ef,0x2f7,0x2ff,
	0x307,0x30f,0x317,0x31f,0x327,0x32f,0x337,0x33f,
	0x347,0x34f,0x357,0x35f,0x367,0x36f,0x377,0x37f,
	0x387,0x38f,0x397,0x39f,0x3a7,0x3af,0x3b7,0x3bf,
	0x3c7,0x3cf,0x3d7,0x3df,0x3e7,0x3ef,0x3f7,0x3ff,
	0x3f7,0x3ef,0x3e7,0x3df,0x3d7,0x3cf,0x3c7,0x3bf,
	0x3b7,0x3af,0x3a7,0x39f,0x397,0x38f,0x387,0x37f,
	0x377,0x36f,0x367,0x35f,0x357,0x34f,0x347,0x33f,
	0x337,0x32f,0x327,0x31f,0x317,0x30f,0x307,0x2ff,
	0x2f7,0x2ef,0x2e7,0x2df,0x2d7,0x2cf,0x2c7,0x2bf,
	0x2b7,0x2af,0x2a7,0x29f,0x297,0x28f,0x287,0x27f,
	0x277,0x26f,0x267,0x25f,0x257,0x24f,0x247,0x23f,
	0x237,0x22f,0x227,0x21f,0x217,0x20f,0x207,0x200,
	0x1f8,0x1f0,0x1e8,0x1e0,0x1d8,0x1d0,0x1c8,0x1c0,
	0x1b8,0x1b0,0x1a8,0x1a0,0x198,0x190,0x188,0x180,
	0x178,0x170,0x168,0x160,0x158,0x150,0x148,0x140,
	0x138,0x130,0x128,0x120,0x118,0x110,0x108,0x100,
	0xf8,0xf0,0xe8,0xe0,0xd8,0xd0,0xc8,0xc0,
	0xb8,0xb0,0xa8,0xa0,0x98,0x90,0x88,0x80,
	0x78,0x70,0x68,0x60,0x58,0x50,0x48,0x40,
	0x38,0x30,0x28,0x20,0x18,0x10,0x8,0x0,
};


Oscillator::Oscillator(uint32_t frequency, Waveform waveform) {
	this->frequency = frequency;
	this->waveform = waveform;
	//Serial.print("oscillator frequency: ");
	//Serial.println(this->frequency);
	//Serial.print("oscillator waveform: ");
	//Serial.println(this->waveform);
}

Oscillator::~Oscillator() {
	// TODO Auto-generated destructor stub
}

void Oscillator::setFrequency(uint32_t frequency)
{
	this->frequency = frequency;
}

void Oscillator::setOffset(int32_t offset)
{
	this->frequency_offset = offset;
}

void Oscillator::setWaveform(Waveform waveform)
{
	this->waveform = waveform;
}

void Oscillator::setPulsewidth(uint8_t pulsewidth)
{
	this->pulsewidth = pulsewidth;
}


void Oscillator::run()
{

	switch(waveform)
	{
	 case SINE:
	 {
		 this->currentsample = (sineTable[phase >> 24] - 511);
		 break;
	 }
	 case SQUARE:
	 {
		 if((phase >> 24) < pulsewidth)
		 {
			 this->currentsample = 511;
		 }
		 else
		 {
			 this->currentsample = -511;
		 }
		 break;
	 }
	 case SAW:
	 {
		 this->currentsample = (phase >> 22) - 511;
		 break;
	 }
	 case TRIANGLE:
	 {
		 this->currentsample = (traingleTable[phase >> 24] - 511);
		 break;
	 }
	}
	this->phase += (this->frequency + this->frequency_offset);
}

int16_t Oscillator::out()
{
	//Serial.print("oscillator sample: ");
	//Serial.println(this->currentsample);
	return this->currentsample;
}


/*
LFO::LFO(){

}

LFO::~LFO()
{

}

void LFO::setFrequency(uint32_t frequency)
{

}
void LFO::setWaveform(Waveform waveform)
{

}

void setPulsewidth(uint8_t pulsewidth)
{

}

void LFO::run()
{
	switch(waveform)
		{
		 case SINE:
		 {
			 this->currentsample = (sineTable[phase >> 24] - 511);
			 break;
		 }
		 case SQUARE:
		 {
			 if((phase >> 24) < pulsewidth)
			 {
				 this->currentsample = 511;
			 }
			 else
			 {
				 this->currentsample = -511;
			 }
			 break;
		 }
		 case SAW:
		 {
			 this->currentsample = (phase >> 22) - 511;
			 break;
		 }
		 case TRIANGLE:
		 {
			 this->currentsample = (traingleTable[phase >> 24] - 511);
			 break;
		 }
		}
		this->phase += (this->frequency);
}
int16_t LFO::out()
{

}
*/
